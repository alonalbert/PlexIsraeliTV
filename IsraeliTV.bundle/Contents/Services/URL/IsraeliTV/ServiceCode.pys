RE_RES = Regex('^[0-9]+x([0-9]+)-.*')

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    json = JSON.ObjectFromURL(url, cacheTime=CACHE_1HOUR, )
    vodItem = json["vod_item"]

    imagesJson = vodItem["images_json"]
    images = JSON.ObjectFromString(imagesJson)
    thumbnail = None
    if images is not None:
        thumbnail = images.get("large_thumb")
        if thumbnail is None:
            thumbnail = images.get("large_thumbnail")

    return VideoClipObject(
        title=vodItem["title"],
        summary=vodItem["summary"],
        thumb=Resource.ContentsOfURLWithFallback(thumbnail),
    )

####################################################################################################
def MediaObjectsForURL(url):
    json = JSON.ObjectFromURL(url, cacheTime=CACHE_1HOUR)
    vodItem = json["vod_item"]
    streamUrl = vodItem["stream_url"]
    playlist = HTTP.Request(streamUrl, cacheTime=CACHE_1HOUR).content
    Log("MediaObjectsForURL: playList=%s" % (playlist))

    maxRes = 0
    for line in playlist.splitlines()[1:-2]:
        if line.startswith('#'):
            continue
        match = RE_RES.search(line)
        if match == None:
            continue
        res = int(match.groups()[0])
        Log("MediaObjectsForURL: line=%s, res=%d" % (line, res))
        if res > maxRes:
            maxRes = res

    if maxRes == 0:
        maxRes = 720

    return [
        MediaObject(
            parts=[
                PartObject(
                    key=HTTPLiveStreamURL(Callback(PlayVideo, url=streamUrl))
                )
            ],
            video_resolution=str(maxRes),
            audio_channels=2,
            optimized_for_streaming=True
        )
    ]

####################################################################################################
@indirect
def PlayVideo(url):
    Log("PlayVideo: URL=%s" % (url))
    playlist = HTTP.Request(url, cacheTime=CACHE_1HOUR)
    cookie = playlist.headers['set-cookie']
    return IndirectResponse(VideoClipObject,
                            key=HTTPLiveStreamURL(url),
                            http_cookies=cookie
    )
